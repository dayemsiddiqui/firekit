---
description:
globs:
alwaysApply: true
---

- This project uses the latest version of AdonisJS with React on the frontend with the help of inertiaJS
- Whenever you are not sure how to implement something look up the web for the lastest version and best practice guidelines on how to implement it in AdonisJS
- Whenever you make any changes in the project, please always write/update tests for it.-
- The frontend is using SHADCN and tailwindcss with React
- Always try to build the project after the changes and ensure it doesnt have any build or type errors
- Always run tests after finishing your work to ensure that everything works as expected and you havent broken anything-
- Ensure end to end type safety by always using InferPageProps, DO NOT Redefine or redeclare the duplicate types on the frontend as it ruins end to end type safety

- Since we use React with InertiaJS on the frontned, whenever you are writing tests for controller ensure that you create appropiate asserts and test cases to cater the inertiajs response from the controller which return a inertiaJS reponse

- When writing code always follow the best practices for AdonisJS, InertiaJS, typescript and domain driven design. If you are unsure about anything search the web for best practices

- Whenever you make changes in the codebase try to following existing patterns

### Testing

You can run tests like this:
Running tests
You can run tests by executing the node ace test command. Also, you can run tests for a specific suite by passing the suite name.

# Runs all tests

node ace test

# Only functional tests are executed

node ace test functional

# unit and functional tests are executed sequentially

node ace test unit functional

# Only tests with an "orders" or "upload" tag in the "unit" and "functional" suites

node ace test --tags="orders,upload" unit functional
The test command accepts the following flags.

--watch: Run tests in the watch mode. The watcher will run only tests from the modified file if a test file is changed. Otherwise, all tests are executed.
--tags: Run tests that have one or more of the mentioned tags.
--ignore-tags: The inverse of the --tags flag. Only run tests that do not have all of the mentioned tags.
--files: Cherry pick and run tests from mentioned files.
--timeout: Define the global timeout for all the tests.
--force-exit: Force exit the test process if it does not ends gracefully.
--tests: Run specific tests by title.
